{"version":3,"sources":["components/Weather/Weather.module.css","FetchWeatherData/FetchWeatherData.ts","components/Weather/Weather.tsx","App.tsx","index.tsx"],"names":["module","exports","FetchWeatherData","cityName","lang","a","axios","get","response","data","Weather","useState","city","setCity","weatherData","setWeatherData","setLang","error","setError","className","name","main","temp","wStyle","weather","warm","search_box","search_bar","type","value","onChange","event","target","onKeyUp","e","key","trim","then","catch","placeholder","select_bar","weather_data","location","sys","country","date","d","month","getMonth","year","getFullYear","day","getDate","dateBuilder","Date","weather_box","Math","round","weather_disc","description","App","ReactDOM","render","document","getElementById"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,KAAO,sBAAsB,WAAa,4BAA4B,WAAa,4BAA4B,WAAa,4BAA4B,SAAW,0BAA0B,KAAO,sBAAsB,YAAc,6BAA6B,KAAO,sBAAsB,aAAe,8BAA8B,MAAQ,yB,wKCE/XC,EAAgB,uCAAG,WAAOC,EAAiBC,GAAxB,eAAAC,EAAA,sEACLC,IAAMC,IAAN,4DAA+DJ,EAA/D,iBAAgFC,EAAhF,kBAFX,qCACgB,cACxBI,EADwB,yBAEvBA,EAASC,MAFc,2CAAH,wD,OCEhBC,EAAU,WAWnB,MAAsBC,mBAAS,IAA/B,mBAAKC,EAAL,KAAWC,EAAX,KACA,EAAoCF,mBAA0B,IAA9D,mBAAKG,EAAL,KAAkBC,EAAlB,KACA,EAAsBJ,mBAAS,MAA/B,mBAAKP,EAAL,KAAWY,EAAX,KACA,EAAwBL,oBAAS,GAAjC,mBAAKM,EAAL,KAAYC,EAAZ,KA4BA,OACI,qBACIC,UAAWL,EAAYM,MAAQN,EAAYO,KAAKC,KAAO,IAAMC,IAAOC,QAAU,IAAMD,IAAOE,KAAOF,IAAOC,QAD7G,SAEI,gCACI,sBAAKL,UAAWI,IAAOG,WAAvB,UACI,uBAAOP,UAAWI,IAAOI,WAAYC,KAAK,OAAOC,MAAOjB,EAAMkB,SApB3D,SAACC,GAChBlB,EAAQD,EAAOmB,EAAMC,OAAOH,QAoBTI,QAfD,SAACC,GACL,UAAVA,EAAEC,KACFjC,EAAiBU,EAAKwB,OAAQhC,GAAMiC,MAAK,SAAA7B,GAAQ,OAAIO,EAAe,eAAIP,OACnE6B,MAAK,kBAAMxB,EAAQD,EAAO,OAC1ByB,MAAK,kBAAMnB,EAASD,GAAQ,MAC5BqB,OAAM,kBAAMpB,EAASD,GAAQ,OAUKsB,YAAa,cAC5C,yBAAQT,SAnBL,SAACI,GAChBlB,EAAQZ,EAAO8B,EAAEF,OAAOH,QAkBkBV,UAAWI,IAAOiB,WAAhD,UACI,wBAAQX,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,sBAGPZ,EAAQ,qBAAKE,UAAWI,IAAON,MAAvB,4BAAqD,KAC7DH,EAAYM,KACT,sBAAKD,UAAWI,IAAOkB,aAAvB,UACI,qBAAItB,UAAWI,IAAOmB,SAAtB,UAAiC5B,EAAYM,KAA7C,KAAqDN,EAAY6B,IAAIC,QAArE,OACA,8BACI,mBAAGzB,UAAWI,IAAOsB,KAArB,SA3CJ,SAACC,GACjB,IAGIC,EAAiB,OAAT3C,EAHG,CAAC,uCAAU,6CAAW,2BAAQ,uCAAU,qBAAO,2BAAQ,2BAAQ,uCAAU,mDAAY,6CAAW,uCAAU,8CAGpF0C,EAAEE,YAFxB,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAEhEF,EAAEE,YAC5DC,EAAOH,EAAEI,cACTC,EAAML,EAAEM,UAEZ,MAAM,GAAN,OAAUD,EAAV,YAAiBJ,EAAjB,YAA0BE,GAmCsBI,CAAY,IAAIC,UAEhD,sBAAKnC,UAAWI,IAAOgC,YAAvB,UACI,oBAAGpC,UAAWI,IAAOD,KAArB,UACKkC,KAAKC,MAAM3C,EAAYO,KAAKC,KAAO,KADxC,WAGA,mBAAGH,UAAWI,IAAOmC,aAArB,SAAoC5C,EAAYU,QAAQ,GAAGmC,oBAIjE,WC7DPC,MARf,WACE,OACE,qBAAKzC,UAAU,MAAf,SACE,cAAC,EAAD,OCJN0C,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.4b7783f3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"weather\":\"Weather_weather__3jiTD\",\"warm\":\"Weather_warm__2qLiz\",\"search_box\":\"Weather_search_box__1XtUo\",\"search_bar\":\"Weather_search_bar__3Fjgk\",\"select_bar\":\"Weather_select_bar__25Kky\",\"location\":\"Weather_location__2Shu1\",\"date\":\"Weather_date__1oIIA\",\"weather_box\":\"Weather_weather_box__3poZl\",\"temp\":\"Weather_temp__3gPMU\",\"weather_disc\":\"Weather_weather_disc__YMHpC\",\"error\":\"Weather_error__1hQHv\"};","import axios from \"axios\";\r\n\r\nconst API_key = '5a04eff77561159d05f1aea8bbb0714c'\r\nexport const FetchWeatherData = async (cityName:string, lang:any) =>{\r\n  const response =  await  axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&lang=${lang}&appid=${API_key}`)\r\n  return response.data\r\n}","import wStyle from './Weather.module.css'\r\nimport {useState} from \"react\";\r\nimport {FetchWeatherData} from \"../../FetchWeatherData/FetchWeatherData\";\r\n\r\n\r\nexport const Weather = () => {\r\n    interface weatherTypeData {\r\n        name?: string\r\n        temp?: number\r\n        main?: any\r\n        sys?: any\r\n        country?: string\r\n        description?: string\r\n        weather?: any\r\n    }\r\n\r\n    let [city, setCity] = useState('')\r\n    let [weatherData, setWeatherData] = useState<weatherTypeData>({})\r\n    let [lang, setLang] = useState('ru')\r\n    let [error, setError] = useState(false)\r\n\r\n    const dateBuilder = (d: any) => {\r\n        let monthsRu = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'];\r\n        let monthsEn = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n        let month = lang === 'ru' ? monthsRu[d.getMonth()] : monthsEn[d.getMonth()];\r\n        let year = d.getFullYear()\r\n        let day = d.getDate()\r\n\r\n        return `${day} ${month} ${year}`\r\n    }\r\n\r\n    const changeCity = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setCity(city = event.target.value)\r\n     }\r\n    const changeLang = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n        setLang(lang = e.target.value)\r\n    }\r\n    const submitWeather = (e: React.KeyboardEvent) => {\r\n        if (e.key === 'Enter') {\r\n            FetchWeatherData(city.trim(), lang).then(response => setWeatherData({...response}))\r\n                .then(() => setCity(city = ''))\r\n                .then(() => setError(error = false))\r\n                .catch(() => setError(error = true))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={weatherData.name && weatherData.main.temp > 283 ? wStyle.weather + ' ' + wStyle.warm : wStyle.weather}>\r\n            <div>\r\n                <div className={wStyle.search_box}>\r\n                    <input className={wStyle.search_bar} type=\"text\" value={city} onChange={changeCity}\r\n                           onKeyUp={submitWeather} placeholder={'Search...'}/>\r\n                    <select onChange={changeLang} className={wStyle.select_bar}>\r\n                        <option value=\"ru\">Ru</option>\r\n                        <option value=\"en\">En</option>\r\n                    </select>\r\n                </div>\r\n                {error ? <div className={wStyle.error}>City not found</div> : null}\r\n                {weatherData.name ?\r\n                    <div className={wStyle.weather_data}>\r\n                        <h2 className={wStyle.location}>{weatherData.name}, {weatherData.sys.country} </h2>\r\n                        <div>\r\n                            <p className={wStyle.date}>{dateBuilder(new Date())}</p>\r\n                        </div>\r\n                        <div className={wStyle.weather_box}>\r\n                            <p className={wStyle.temp}>\r\n                                {Math.round(weatherData.main.temp - 273)}°C\r\n                            </p>\r\n                            <p className={wStyle.weather_disc}>{weatherData.weather[0].description}</p>\r\n                        </div>\r\n\r\n                    </div>\r\n                    : null\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\n\nimport './App.css';\nimport {Weather} from \"./components/Weather/Weather\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Weather/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}